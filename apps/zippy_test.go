package main

import (
	"encoding/json"
	"io"
	"net/http"
	"strings"
	"testing"
)

var (
	reader  io.Reader
	testurl = "http://localhost:12345/scanfile"
)

type ResponseData struct {
	Filename string
	Result   bool
}

func TestPortOfBashTest1(t *testing.T) {
	testJson := `{"filename":"true.zip","data":"UEsDBBQAAAAIACOG/0o1DgKPSAAAAFYAAAAIABwAVFJVRS50eHRVVAkAA/LBf1nywX9ZdXgLAAEE9QEAAAQUAAAAJYtBCsAgDATvfcW+oK/xA0FjEyoJaCDfr1LYywyzRXRhjxC8Al0HI4QC1S1IbW1ipM/2Byla5RyObhSEZNBkDPdX7UH3eV8fUEsBAh4DFAAAAAgAI4b/SjUOAo9IAAAAVgAAAAgAGAAAAAAAAQAAAKSBAAAAAFRSVUUudHh0VVQFAAPywX9ZdXgLAAEE9QEAAAQUAAAAUEsFBgAAAAABAAEATgAAAIoAAAAAAA==","searchdata":"dGVzdA=="}`
	HttpPostTest(testJson, "TRUE.txt", true, t)
}

func TestPortOfBashTest2(t *testing.T) {
	testJson := `{"filename":"false.zip","data":"UEsDBBQAAAAIAC2G/0pJXucHPgAAAEQAAAAJABwARkFMU0UudHh0VVQJAAMFwn9ZBcJ/WXV4CwABBPUBAAAEFAAAAA3IwQmAQAwEwL9VbAVWYwPB5LzgkYUkYPsezGuu6YVNMHwZekpDaYVg42a0eOw1aNK18BkkDYt8PR4M5nn8UEsBAh4DFAAAAAgALYb/Skle5wc+AAAARAAAAAkAGAAAAAAAAQAAAKSBAAAAAEZBTFNFLnR4dFVUBQADBcJ/WXV4CwABBPUBAAAEFAAAAFBLBQYAAAAAAQABAE8AAACBAAAAAAA=","searchdata":"dGVzdA=="}`
	HttpPostTest(testJson, "", false, t)
}

func TestPortOfBashTest3(t *testing.T) {
	testJson := `{"filename":"mixed.zip","data":"UEsDBBQAAAAIABWH/0osV6OsLAAAAC0AAAALABwAMS1mYWxzZS50eHRVVAkAA7rDf1nVw39ZdXgLAAEE9QEAAAQUAAAAK8lILU5VSCxKVcjLL1EoyUhVSCnKz0wpVqjMLwUL5+TnZ2fmpSuk5RdxAQBQSwMEFAAAAAgAGIf/SixXo6wsAAAALQAAAAsAHAAyLWZhbHNlLnR4dFVUCQADwMN/WcDDf1l1eAsAAQT1AQAABBQAAAAryUgtTlVILEpVyMsvUSjJSFVIKcrPTClWqMwvBQvn5OdnZ+alK6TlF3EBAFBLAwQUAAAACAAah/9KLFejrCwAAAAtAAAACwAcADMtZmFsc2UudHh0VVQJAAPDw39Zw8N/WXV4CwABBPUBAAAEFAAAACvJSC1OVUgsSlXIyy9RKMlIVUgpys9MKVaozC8FC+fk52dn5qUrpOUXcQEAUEsDBBQAAAAIACGH/0o1DgKPSAAAAFYAAAAKABwANC10cnVlLnR4dFVUCQADzsN/Wc7Df1l1eAsAAQT1AQAABBQAAAAli0EKwCAMBO99xb6gr/EDQWMTKgloIN+vUtjLDLNFdGGPELwCXQcjhALVLUhtbWKkz/YHKVrlHI5uFIRk0GQM91ftQfd5Xx9QSwMEFAAAAAgAI4f/SixXo6wsAAAALQAAAAsAHAA1LWZhbHNlLnR4dFVUCQAD0sN/WdLDf1l1eAsAAQT1AQAABBQAAAAryUgtTlVILEpVyMsvUSjJSFVIKcrPTClWqMwvBQvn5OdnZ+alK6TlF3EBAFBLAwQUAAAACAAlh/9KLFejrCwAAAAtAAAACwAcADYtZmFsc2UudHh0VVQJAAPVw39Z1cN/WXV4CwABBPUBAAAEFAAAACvJSC1OVUgsSlXIyy9RKMlIVUgpys9MKVaozC8FC+fk52dn5qUrpOUXcQEAUEsBAh4DFAAAAAgAFYf/SixXo6wsAAAALQAAAAsAGAAAAAAAAQAAAKSBAAAAADEtZmFsc2UudHh0VVQFAAO6w39ZdXgLAAEE9QEAAAQUAAAAUEsBAh4DFAAAAAgAGIf/SixXo6wsAAAALQAAAAsAGAAAAAAAAQAAAKSBcQAAADItZmFsc2UudHh0VVQFAAPAw39ZdXgLAAEE9QEAAAQUAAAAUEsBAh4DFAAAAAgAGof/SixXo6wsAAAALQAAAAsAGAAAAAAAAQAAAKSB4gAAADMtZmFsc2UudHh0VVQFAAPDw39ZdXgLAAEE9QEAAAQUAAAAUEsBAh4DFAAAAAgAIYf/SjUOAo9IAAAAVgAAAAoAGAAAAAAAAQAAAKSBUwEAADQtdHJ1ZS50eHRVVAUAA87Df1l1eAsAAQT1AQAABBQAAABQSwECHgMUAAAACAAjh/9KLFejrCwAAAAtAAAACwAYAAAAAAABAAAApIHfAQAANS1mYWxzZS50eHRVVAUAA9LDf1l1eAsAAQT1AQAABBQAAABQSwECHgMUAAAACAAlh/9KLFejrCwAAAAtAAAACwAYAAAAAAABAAAApIFQAgAANi1mYWxzZS50eHRVVAUAA9XDf1l1eAsAAQT1AQAABBQAAABQSwUGAAAAAAYABgDlAQAAwQIAAAAA","searchdata":"dGVzdA=="}`
	HttpPostTest(testJson, "4-true.txt", true, t)
}

func TestPortOfBashTest4(t *testing.T) {
	testJson := `{"filename":"random1.zip","data":"UEsDBBQAAAAIABWH/0osV6OsLAAAAC0AAAALABwAMS1mYWxzZS50eHRVVAkAA7rDf1nqw39ZdXgLAAEE9QEAAAQUAAAAK8lILU5VSCxKVcjLL1EoyUhVSCnKz0wpVqjMLwUL5+TnZ2fmpSuk5RdxAQBQSwMEFAAAAAgAGIf/SixXo6wsAAAALQAAAAsAHAAyLWZhbHNlLnR4dFVUCQADwMN/WerDf1l1eAsAAQT1AQAABBQAAAAryUgtTlVILEpVyMsvUSjJSFVIKcrPTClWqMwvBQvn5OdnZ+alK6TlF3EBAFBLAwQUAAAACAAah/9KLFejrCwAAAAtAAAACwAcADMtZmFsc2UudHh0VVQJAAPDw39Z6sN/WXV4CwABBPUBAAAEFAAAACvJSC1OVUgsSlXIyy9RKMlIVUgpys9MKVaozC8FC+fk52dn5qUrpOUXcQEAUEsDBBQAAAAIACGH/0o1DgKPSAAAAFYAAAAKABwANC10cnVlLnR4dFVUCQADzsN/WS/Hf1l1eAsAAQT1AQAABBQAAAAli0EKwCAMBO99xb6gr/EDQWMTKgloIN+vUtjLDLNFdGGPELwCXQcjhALVLUhtbWKkz/YHKVrlHI5uFIRk0GQM91ftQfd5Xx9QSwMEFAAAAAgAI4f/SixXo6wsAAAALQAAAAsAHAA1LWZhbHNlLnR4dFVUCQAD0sN/WerDf1l1eAsAAQT1AQAABBQAAAAryUgtTlVILEpVyMsvUSjJSFVIKcrPTClWqMwvBQvn5OdnZ+alK6TlF3EBAFBLAwQUAAAACAAlh/9KLFejrCwAAAAtAAAACwAcADYtZmFsc2UudHh0VVQJAAPVw39Z6sN/WXV4CwABBPUBAAAEFAAAACvJSC1OVUgsSlXIyy9RKMlIVUgpys9MKVaozC8FC+fk52dn5qUrpOUXcQEAUEsDBAoAAAAAAK+K/0oW0OiLgAAAAIAAAAAKABwAcmFuZG9tLmRhdFVUCQADisl/WZXJf1l1eAsAAQT1AQAABBQAAACHxWLsRQHv8VZxlHK4ASPDczslI3Eri8+V/R8m7TC0grznzbfROkYzrr3IONEJ4lTQLrU/mDjgxcA0q25J0E45D2zoOA2Ylwihp2Hmisq2SM6rxcIdfkB3WPVS+l0hZmU7UjSn7kINiQvpXEu7C3v369bHdC6V0iuryDv2DHfAvVBLAQIeAxQAAAAIABWH/0osV6OsLAAAAC0AAAALABgAAAAAAAEAAACkgQAAAAAxLWZhbHNlLnR4dFVUBQADusN/WXV4CwABBPUBAAAEFAAAAFBLAQIeAxQAAAAIABiH/0osV6OsLAAAAC0AAAALABgAAAAAAAEAAACkgXEAAAAyLWZhbHNlLnR4dFVUBQADwMN/WXV4CwABBPUBAAAEFAAAAFBLAQIeAxQAAAAIABqH/0osV6OsLAAAAC0AAAALABgAAAAAAAEAAACkgeIAAAAzLWZhbHNlLnR4dFVUBQADw8N/WXV4CwABBPUBAAAEFAAAAFBLAQIeAxQAAAAIACGH/0o1DgKPSAAAAFYAAAAKABgAAAAAAAEAAACkgVMBAAA0LXRydWUudHh0VVQFAAPOw39ZdXgLAAEE9QEAAAQUAAAAUEsBAh4DFAAAAAgAI4f/SixXo6wsAAAALQAAAAsAGAAAAAAAAQAAAKSB3wEAADUtZmFsc2UudHh0VVQFAAPSw39ZdXgLAAEE9QEAAAQUAAAAUEsBAh4DFAAAAAgAJYf/SixXo6wsAAAALQAAAAsAGAAAAAAAAQAAAKSBUAIAADYtZmFsc2UudHh0VVQFAAPVw39ZdXgLAAEE9QEAAAQUAAAAUEsBAh4DCgAAAAAAr4r/ShbQ6IuAAAAAgAAAAAoAGAAAAAAAAAAAAKSBwQIAAHJhbmRvbS5kYXRVVAUAA4rJf1l1eAsAAQT1AQAABBQAAABQSwUGAAAAAAcABwA1AgAAhQMAAAAA","searchdata":"RFJBR09OUw=="}`
	HttpPostTest(testJson, "", false, t)
}

func TestPortOfBashTest5(t *testing.T) {
	testJson := `{"filename":"random1.zip","data":"UEsDBBQAAAAIABWH/0osV6OsLAAAAC0AAAALABwAMS1mYWxzZS50eHRVVAkAA7rDf1noyn9ZdXgLAAEE9QEAAAQUAAAAK8lILU5VSCxKVcjLL1EoyUhVSCnKz0wpVqjMLwUL5+TnZ2fmpSuk5RdxAQBQSwMEFAAAAAgAGIf/SixXo6wsAAAALQAAAAsAHAAyLWZhbHNlLnR4dFVUCQADwMN/WejKf1l1eAsAAQT1AQAABBQAAAAryUgtTlVILEpVyMsvUSjJSFVIKcrPTClWqMwvBQvn5OdnZ+alK6TlF3EBAFBLAwQUAAAACAAah/9KLFejrCwAAAAtAAAACwAcADMtZmFsc2UudHh0VVQJAAPDw39Z6Mp/WXV4CwABBPUBAAAEFAAAACvJSC1OVUgsSlXIyy9RKMlIVUgpys9MKVaozC8FC+fk52dn5qUrpOUXcQEAUEsDBBQAAAAIACGH/0o1DgKPSAAAAFYAAAAKABwANC10cnVlLnR4dFVUCQADzsN/WejKf1l1eAsAAQT1AQAABBQAAAAli0EKwCAMBO99xb6gr/EDQWMTKgloIN+vUtjLDLNFdGGPELwCXQcjhALVLUhtbWKkz/YHKVrlHI5uFIRk0GQM91ftQfd5Xx9QSwMEFAAAAAgAI4f/SixXo6wsAAAALQAAAAsAHAA1LWZhbHNlLnR4dFVUCQAD0sN/WejKf1l1eAsAAQT1AQAABBQAAAAryUgtTlVILEpVyMsvUSjJSFVIKcrPTClWqMwvBQvn5OdnZ+alK6TlF3EBAFBLAwQUAAAACAAlh/9KLFejrCwAAAAtAAAACwAcADYtZmFsc2UudHh0VVQJAAPVw39Z6Mp/WXV4CwABBPUBAAAEFAAAACvJSC1OVUgsSlXIyy9RKMlIVUgpys9MKVaozC8FC+fk52dn5qUrpOUXcQEAUEsDBAoAAAAAAEeL/0qvGZ5QhwAAAIcAAAALABwAcmFuZG9tMi5kYXRVVAkAA6XKf1m3yn9ZdXgLAAEE9QEAAAQUAAAAz5Am8VKpZFeqYC2uuHMG2rtZ1of8Rape0qCijVZorg6kT1qaSakoQV6vpkRSQUdPTlNn3JFSE3wwGBXy7p/gyVVardoCipHMnjhGao0jzTb5V/iNvFZvFo/6WG8JRX3uX61x6PuKtesThO3zHAUyOBLAsoTYnhZ3GxdKKxbTWpxpT43/+x3PUEsBAh4DFAAAAAgAFYf/SixXo6wsAAAALQAAAAsAGAAAAAAAAQAAAKSBAAAAADEtZmFsc2UudHh0VVQFAAO6w39ZdXgLAAEE9QEAAAQUAAAAUEsBAh4DFAAAAAgAGIf/SixXo6wsAAAALQAAAAsAGAAAAAAAAQAAAKSBcQAAADItZmFsc2UudHh0VVQFAAPAw39ZdXgLAAEE9QEAAAQUAAAAUEsBAh4DFAAAAAgAGof/SixXo6wsAAAALQAAAAsAGAAAAAAAAQAAAKSB4gAAADMtZmFsc2UudHh0VVQFAAPDw39ZdXgLAAEE9QEAAAQUAAAAUEsBAh4DFAAAAAgAIYf/SjUOAo9IAAAAVgAAAAoAGAAAAAAAAQAAAKSBUwEAADQtdHJ1ZS50eHRVVAUAA87Df1l1eAsAAQT1AQAABBQAAABQSwECHgMUAAAACAAjh/9KLFejrCwAAAAtAAAACwAYAAAAAAABAAAApIHfAQAANS1mYWxzZS50eHRVVAUAA9LDf1l1eAsAAQT1AQAABBQAAABQSwECHgMUAAAACAAlh/9KLFejrCwAAAAtAAAACwAYAAAAAAABAAAApIFQAgAANi1mYWxzZS50eHRVVAUAA9XDf1l1eAsAAQT1AQAABBQAAABQSwECHgMKAAAAAABHi/9KrxmeUIcAAACHAAAACwAYAAAAAAAAAAAApIHBAgAAcmFuZG9tMi5kYXRVVAUAA6XKf1l1eAsAAQT1AQAABBQAAABQSwUGAAAAAAcABwA2AgAAjQMAAAAA","searchdata":"RFJBR09OUw=="}`
	HttpPostTest(testJson, "random2.dat", true, t)
}

func TestMalformedData(t *testing.T) {
	testJson := `{"filename":"random1.zip","data":"@@@@@@@@"","searchdata":"RFJBR09OUw=="}`
	OnlyTestResponseCode(testJson, 500, t)
}

func TestInvalidRequest(t *testing.T) {
	testJson := "NOTJSON"
	OnlyTestResponseCode(testJson, 500, t)
}

func OnlyTestResponseCode(testJson string, expectedResponseCode int, t *testing.T) {
	reader = strings.NewReader(testJson)
	request, err := http.NewRequest("POST", testurl, reader)
	if err != nil {
		t.Error(err)
	}
	request.Header.Add("Content-Type", "application/json")

	response, err := http.DefaultClient.Do(request)
	if err != nil {
		t.Error(err)
	}

	if response.StatusCode != expectedResponseCode {
		t.Errorf("Expected response code: %d but got: %d", expectedResponseCode, response.StatusCode)
	}
}

func HttpPostTest(testJson string, expectedString string, expectedBoolean bool, t *testing.T) {
	reader = strings.NewReader(testJson)
	request, err := http.NewRequest("POST", testurl, reader)
	if err != nil {
		t.Error(err)
	}
	request.Header.Add("Content-Type", "application/json")

	response, err := http.DefaultClient.Do(request)
	if err != nil {
		t.Error(err)
	}

	if response.StatusCode != 200 {
		t.Errorf("Success expected: %d", response.StatusCode)
	}

	responseData := ResponseData{}

	defer response.Body.Close()
	json.NewDecoder(response.Body).Decode(&responseData)

	AssertString(expectedString, responseData.Filename, t)
	AssertBool(expectedBoolean, responseData.Result, t)
}

func AssertString(expected string, actual string, t *testing.T) {
	if expected != actual {
		t.Errorf("Assertion Error. Expected %s but got %s", expected, actual)
	}
}

func AssertBool(expected bool, actual bool, t *testing.T) {
	if expected != actual {
		t.Errorf("Assertion Error. Expected %t but got %t", expected, actual)
	}
}
